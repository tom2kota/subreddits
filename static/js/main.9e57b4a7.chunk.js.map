{"version":3,"sources":["actions/index.js","reducers/index.js","components/Picker.js","components/Posts.js","containers/App.js","index.js"],"names":["selectSubreddit","subreddit","type","invalidateSubreddit","fetchPosts","dispatch","requestPosts","fetch","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","items","action","lastUpdated","rootReducer","combineReducers","selectedSubreddit","Picker","value","onChange","options","className","toUpperCase","e","target","option","key","Posts","post","i","title","App","handleChange","nextSubreddit","props","handleRefreshClick","preventDefault","this","prevProps","isEmpty","length","href","onClick","toLocaleTimeString","style","opacity","Component","connect","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","reducer","applyMiddleware","render","document","getElementById"],"mappings":"+OAKaA,EAAkB,SAAAC,GAAS,MAAK,CACzCC,KAJ4B,mBAK5BD,cAGSE,EAAsB,SAAAF,GAAS,MAAK,CAC7CC,KARgC,uBAShCD,cAeEG,EAAa,SAAAH,GAAS,OAAI,SAAAI,GAE5B,OADAA,EAbwB,SAAAJ,GAAS,MAAK,CACtCC,KAhByB,gBAiBzBD,aAWSK,CAAaL,IACfM,MAAM,4BAAD,OAA6BN,EAA7B,UACPO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIL,EAXM,SAACJ,EAAWS,GAAZ,MAAsB,CAC9CR,KApByB,gBAqBzBD,YACAU,MAAOD,EAAKE,KAAKC,SAASC,KAAI,SAAAC,GAAK,OAAIA,EAAMH,QAC7CI,WAAYC,KAAKC,OAOUC,CAAalB,EAAWS,SAc1CU,EAAqB,SAAAnB,GAAS,OAAI,SAACI,EAAUgB,GACtD,GAZqB,SAACC,EAAOrB,GAC7B,IAAMU,EAAQW,EAAMC,iBAAiBtB,GACrC,OAAKU,IAGDA,EAAMa,YAGHb,EAAMc,cAITC,CAAiBL,IAAYpB,GAC7B,OAAOI,EAASD,EAAWH,MChC7BU,EAAQ,WAIC,IAJAW,EAID,uDAJS,CACnBE,YAAY,EACZC,eAAe,EACfE,MAAO,IACRC,EAAW,uCACV,OAAQA,EAAO1B,MACX,IDlB4B,uBCmBxB,OAAO,2BACAoB,GADP,IAEIG,eAAe,IAEvB,ID1BqB,gBC2BjB,OAAO,2BACAH,GADP,IAEIE,YAAY,EACZC,eAAe,IAEvB,ID/BqB,gBCgCjB,OAAO,2BACAH,GADP,IAEIE,YAAY,EACZC,eAAe,EACfE,MAAOC,EAAOjB,MACdkB,YAAaD,EAAOZ,aAE5B,QACI,OAAOM,IAuBJQ,EALKC,YAAgB,CAChCR,iBAfqB,WAAyB,IAAxBD,EAAuB,uDAAf,GAAIM,EAAW,uCAC7C,OAAQA,EAAO1B,MACX,ID5C4B,uBC6C5B,ID/CqB,gBCgDrB,IDjDqB,gBCkDjB,OAAO,2BACAoB,GADP,kBAEKM,EAAO3B,UAAYU,EAAMW,EAAMM,EAAO3B,WAAY2B,KAE3D,QACI,OAAON,IAMfU,kBAvDsB,WAA6B,IAA5BV,EAA2B,uDAAnB,OAAQM,EAAW,uCAClD,OAAQA,EAAO1B,MACX,IDNwB,mBCOpB,OAAO0B,EAAO3B,UAClB,QACI,OAAOqB,M,gCCmBJW,EA1BA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,QAAnB,OACX,yBAAKC,UAAU,cACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,kBAAkBH,EAAMI,gBAE1C,yBAAKD,UAAU,SACX,4BAAQF,SAAU,SAAAI,GAAC,OAAIJ,EAASI,EAAEC,OAAON,QAAQA,MAAOA,GACnDE,EAAQtB,KAAI,SAAA2B,GAAM,OACf,4BAAQP,MAAOO,EAAQC,IAAKD,GACvBA,UCEVE,EAZD,SAAC,GAAD,IAAEhC,EAAF,EAAEA,MAAF,OACV,6BACKA,EAAMG,KAAI,SAAC8B,EAAMC,GAAP,OACP,uBAAGR,UAAU,sBAAsBK,IAAKG,GAAID,EAAKE,YCCvDC,E,4MAqBFC,aAAe,SAAAC,GACX,EAAKC,MAAM7C,SAASL,EAAgBiD,K,EAGxCE,mBAAqB,SAAAZ,GACjBA,EAAEa,iBADoB,MAGgB,EAAKF,MAApC7C,EAHe,EAGfA,SAAU2B,EAHK,EAGLA,kBACjB3B,EAASF,EAAoB6B,IAC7B3B,EAASe,EAAmBY,K,kEArBX,IAAD,EACsBqB,KAAKH,MAApC7C,EADS,EACTA,SAAU2B,EADD,EACCA,kBACjB3B,EAASe,EAAmBY,M,yCAGbsB,GACf,GAAIA,EAAUtB,oBAAsBqB,KAAKH,MAAMlB,kBAAmB,CAAC,IAAD,EACxBqB,KAAKH,MAApC7C,EADuD,EACvDA,SAAU2B,EAD6C,EAC7CA,kBACjB3B,EAASe,EAAmBY,O,+BAgB1B,IAAD,EACuDqB,KAAKH,MAA1DlB,EADF,EACEA,kBAAmBrB,EADrB,EACqBA,MAAOa,EAD5B,EAC4BA,WAAYK,EADxC,EACwCA,YACvC0B,EAA2B,IAAjB5C,EAAM6C,OACtB,OACI,yBAAKnB,UAAU,gBAEX,yBAAKA,UAAU,eAEX,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,UAAf,wBAGA,qCAAU,uBAAGA,UAAU,iBACVoB,KAAK,qCADR,cAAV,uBAMJ,0BAAMpB,UAAU,6CAEZ,yBAAKA,UAAU,cAEX,yBAAKA,UAAU,SACX,kBAAC,EAAD,CAAQH,MAAOF,EAAmBG,SAAUkB,KAAKL,aACzCZ,QAAS,CAAC,OAAQ,OAAQ,YAGtC,yBAAKC,UAAU,UACTb,GACF,4BAAQkC,QAASL,KAAKF,mBAAoBd,UAAU,kBAApD,eASfR,GACD,yBAAKQ,UAAU,uCAAf,mBACqB,IAAIpB,KAAKY,GAAa8B,qBAD3C,IAEK,KAKL,6BACKJ,EACM/B,EACC,yBAAKa,UAAU,qCAEf,yBAAKA,UAAU,uCAAsC,4BAAI,uBAAGA,UAAU,iBAAjB,oCAEvD,yBAAKuB,MAAO,CAACC,QAASrC,EAAa,GAAM,IACvC,kBAAC,EAAD,CAAOb,MAAOA,W,GAvFxBmD,aAqHHC,eAnBS,SAAAzC,GAAU,IACvBU,EAAuCV,EAAvCU,kBADsB,EACiBV,EAApBC,iBAKLS,IAAsB,CACvCR,YAAY,EACZG,MAAO,IALPH,EAHyB,EAGzBA,WACAK,EAJyB,EAIzBA,YAOJ,MAAO,CACHG,oBACArB,MAbyB,EAKzBgB,MASAH,aACAK,iBAIOkC,CAAyBhB,GCnHlCiB,EAAmBC,OAAOC,sCAAwCC,IAElEC,EAAa,CAACC,KAKpB,IAAMC,EAAQC,YACVC,EACAR,EAAiBS,IAAe,WAAf,EAAmBL,KAGxCM,iBACI,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OAEJK,SAASC,eAAe,W","file":"static/js/main.9e57b4a7.chunk.js","sourcesContent":["export const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport const selectSubreddit = subreddit => ({\n    type: SELECT_SUBREDDIT,\n    subreddit\n})\n\nexport const invalidateSubreddit = subreddit => ({\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n})\n\nexport const requestPosts = subreddit => ({\n    type: REQUEST_POSTS,\n    subreddit\n})\n\nexport const receivePosts = (subreddit, json) => ({\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n})\n\nconst fetchPosts = subreddit => dispatch => {\n    dispatch(requestPosts(subreddit))\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n        .then(response => response.json())\n        .then(json => dispatch(receivePosts(subreddit, json)))\n}\n\nconst shouldFetchPosts = (state, subreddit) => {\n    const posts = state.postsBySubreddit[subreddit]\n    if (!posts) {\n        return true\n    }\n    if (posts.isFetching) {\n        return false\n    }\n    return posts.didInvalidate\n}\n\nexport const fetchPostsIfNeeded = subreddit => (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n        return dispatch(fetchPosts(subreddit))\n    }\n}\n","import {combineReducers} from 'redux'\nimport {\n    SELECT_SUBREDDIT, INVALIDATE_SUBREDDIT,\n    REQUEST_POSTS, RECEIVE_POSTS\n} from '../actions'\n\nconst selectedSubreddit = (state = 'home', action) => {\n    switch (action.type) {\n        case SELECT_SUBREDDIT:\n            return action.subreddit\n        default:\n            return state\n    }\n}\n\nconst posts = (state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n}, action) => {\n    switch (action.type) {\n        case INVALIDATE_SUBREDDIT:\n            return {\n                ...state,\n                didInvalidate: true\n            }\n        case REQUEST_POSTS:\n            return {\n                ...state,\n                isFetching: true,\n                didInvalidate: false\n            }\n        case RECEIVE_POSTS:\n            return {\n                ...state,\n                isFetching: false,\n                didInvalidate: false,\n                items: action.posts,\n                lastUpdated: action.receivedAt\n            }\n        default:\n            return state\n    }\n}\n\nconst postsBySubreddit = (state = {}, action) => {\n    switch (action.type) {\n        case INVALIDATE_SUBREDDIT:\n        case RECEIVE_POSTS:\n        case REQUEST_POSTS:\n            return {\n                ...state,\n                [action.subreddit]: posts(state[action.subreddit], action)\n            }\n        default:\n            return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    postsBySubreddit,\n    selectedSubreddit\n})\n\nexport default rootReducer\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst Picker = ({value, onChange, options}) => (\n    <div className=\"two fields\">\n        <div className=\"field\">\n            <h2 className=\"ui teal header\">{value.toUpperCase()}</h2>\n        </div>\n        <div className=\"field\">\n            <select onChange={e => onChange(e.target.value)} value={value}>\n                {options.map(option =>\n                    <option value={option} key={option}>\n                        {option}\n                    </option>)\n                }\n            </select>\n        </div>\n    </div>\n)\n\n\nPicker.propTypes = {\n    options: PropTypes.arrayOf(\n        PropTypes.string.isRequired\n    ).isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n}\n\nexport default Picker\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Posts = ({posts}) => (\n    <div>\n        {posts.map((post, i) =>\n            <p className=\"ui floating message\" key={i}>{post.title}</p>\n        )}\n    </div>\n)\n\nPosts.propTypes = {\n    posts: PropTypes.array.isRequired\n}\n\nexport default Posts\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {selectSubreddit, fetchPostsIfNeeded, invalidateSubreddit} from '../actions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\n\nclass App extends Component {\n    static propTypes = {\n        selectedSubreddit: PropTypes.string.isRequired,\n        posts: PropTypes.array.isRequired,\n        isFetching: PropTypes.bool.isRequired,\n        lastUpdated: PropTypes.number,\n        dispatch: PropTypes.func.isRequired\n    }\n\n    componentDidMount() {\n        const {dispatch, selectedSubreddit} = this.props\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedSubreddit !== this.props.selectedSubreddit) {\n            const {dispatch, selectedSubreddit} = this.props\n            dispatch(fetchPostsIfNeeded(selectedSubreddit))\n        }\n    }\n\n    handleChange = nextSubreddit => {\n        this.props.dispatch(selectSubreddit(nextSubreddit))\n    }\n\n    handleRefreshClick = e => {\n        e.preventDefault()\n\n        const {dispatch, selectedSubreddit} = this.props\n        dispatch(invalidateSubreddit(selectedSubreddit))\n        dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n\n    render() {\n        const {selectedSubreddit, posts, isFetching, lastUpdated} = this.props\n        const isEmpty = posts.length === 0\n        return (\n            <div className=\"ui container\">\n\n                <div className=\"ui segments\">\n\n                    <div className=\"ui massive center aligned segment\">\n                        <div className=\"header\">\n                            Welcome to our site!\n                        </div>\n                        <p>Render <a className=\"ui teal header\"\n                                     href=\"https://www.reddit.com/subreddits\">SubReddits</a> -\n                            React Redux App</p>\n                    </div>\n\n\n                    <form className=\"ui form center aligned secondary segment \">\n\n                        <div className=\"two fields\">\n\n                            <div className=\"field\">\n                                <Picker value={selectedSubreddit} onChange={this.handleChange}\n                                        options={['home', 'pics', 'funny']}/>\n                            </div>\n\n                            <div className=\"field\">\n                                {!isFetching &&\n                                <button onClick={this.handleRefreshClick} className=\"ui teal button\">REFRESH</button>\n                                }\n                            </div>\n\n                        </div>\n                    </form>\n                </div>\n\n\n                {lastUpdated &&\n                <div className=\"ui bottom  warning floating message\">\n                    Last updated at {new Date(lastUpdated).toLocaleTimeString()}.\n                    {' '}\n                </div>\n                }\n\n\n                <div>\n                    {isEmpty\n                        ? (isFetching ?\n                            <div className=\"ui active centered inline loader\"></div>\n                            :\n                            <div className=\"ui bottom  warning floating message\"><h2><i className=\"icon warning\"/>\n                                Something went wrong ... Empty.</h2></div>)\n                        : <div style={{opacity: isFetching ? 0.5 : 1}}>\n                            <Posts posts={posts}/>\n                        </div>\n                    }\n                </div>\n\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const {selectedSubreddit, postsBySubreddit} = state\n    const {\n        isFetching,\n        lastUpdated,\n        items: posts\n    } = postsBySubreddit[selectedSubreddit] || {\n        isFetching: true,\n        items: []\n    }\n\n    return {\n        selectedSubreddit,\n        posts,\n        isFetching,\n        lastUpdated\n    }\n}\n\nexport default connect(mapStateToProps)(App)\n","import React from 'react'\nimport {render} from 'react-dom'\nimport {createStore, applyMiddleware, compose} from 'redux'\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\nimport {createLogger} from 'redux-logger'\nimport reducer from './reducers'\nimport App from './containers/App'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst middleware = [thunk]\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(createLogger())\n}\n\nconst store = createStore(\n    reducer,\n    composeEnhancers(applyMiddleware(...middleware))\n)\n\nrender(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}